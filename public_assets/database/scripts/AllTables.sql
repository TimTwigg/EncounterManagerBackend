BEGIN TRANSACTION;

CREATE TABLE "User" ( "UserName" TEXT NOT NULL UNIQUE, PRIMARY KEY ("UserName") );
CREATE TABLE "RecordSource" ( "RecordSource" TEXT NOT NULL UNIQUE, PRIMARY KEY ("RecordSource") );
CREATE TABLE "Ability" ( "Ability" TEXT NOT NULL UNIQUE COLLATE NOCASE, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("Ability"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "Condition" ( "Condition" TEXT NOT NULL UNIQUE COLLATE NOCASE, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("Condition"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "ConditionEffect" ( "Condition" TEXT NOT NULL UNIQUE COLLATE NOCASE, "EffectID" INTEGER NOT NULL, "Description" TEXT NOT NULL, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EffectID", "Condition"), FOREIGN KEY ("Condition") REFERENCES "Condition" ("Condition"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "DamageType" ( "DamageType" TEXT NOT NULL UNIQUE COLLATE NOCASE, "Description" TEXT NOT NULL, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("DamageType"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "Language" ( "Language" TEXT NOT NULL UNIQUE, "Description" INTEGER NOT NULL, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("Language"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "Size" ( "Size" TEXT NOT NULL UNIQUE, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("Size"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "Alignment" ( "Alignment" TEXT NOT NULL UNIQUE, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("Alignment"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "EntityType" ( "EntityType" TEXT NOT NULL UNIQUE, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EntityType"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "ModifierType" ( "ModifierType" TEXT NOT NULL UNIQUE, "Description" TEXT NOT NULL, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("ModifierType"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "Entity" ( "EntityID" INTEGER NOT NULL UNIQUE, "Name" TEXT NOT NULL COLLATE NOCASE, "ChallengeRating" NUMERIC NOT NULL CHECK ("ChallengeRating" >= 0), "ProficiencyBonus" INTEGER NOT NULL CHECK ("ProficiencyBonus" >= 2), "Source" TEXT NOT NULL, "Size" TEXT NOT NULL, "Type" TEXT NOT NULL, "Alignment" TEXT DEFAULT 'Any', "ArmorClass" INTEGER NOT NULL, "HitPoints1" INTEGER NOT NULL, "HitPoints2" TEXT NOT NULL, "SWalk" INTEGER NOT NULL DEFAULT 0 CHECK ("SWalk" >= 0), "SFly" INTEGER NOT NULL DEFAULT 0 CHECK ("SFly" >= 0), "SClimb" INTEGER NOT NULL DEFAULT 0 CHECK ("Sclimb" >= 0), "SSwim" INTEGER NOT NULL DEFAULT 0 CHECK ("SSwim" >= 0), "SBurrow" INTEGER NOT NULL DEFAULT 0 CHECK ("SBurrow" >= 0), "ReactionCount" INTEGER NOT NULL DEFAULT 1 CHECK ("ReactionCount" >= 0), "ArmorType" TEXT NOT NULL, "RecordSource" TEXT NOT NULL, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EntityID" AUTOINCREMENT), FOREIGN KEY ("Size") REFERENCES "Size" ("Size"), FOREIGN KEY ("Type") REFERENCES "EntityType" ("EntityType"), FOREIGN KEY ("RecordSource") REFERENCES "RecordSource" ("RecordSource"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "EntityStats" ( "EntityID" INTEGER NOT NULL, "Ability" TEXT NOT NULL CHECK (length ("Ability") > 0), "Value" INTEGER NOT NULL DEFAULT 10 CHECK ("Value" >= 0), "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EntityID", "Ability"), FOREIGN KEY ("EntityID") REFERENCES "Entity" ("EntityID") ON DELETE CASCADE, FOREIGN KEY ("Ability") REFERENCES "Ability" ("Ability") ON DELETE CASCADE, FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "Action" ( "EntityID" INTEGER NOT NULL, "ActionID" INTEGER NOT NULL CHECK ("ActionID" >= 0), "Name" TEXT DEFAULT '', "AttackType" TEXT DEFAULT '', "HitModifier" INTEGER DEFAULT 0, "Reach" INTEGER DEFAULT 0, "Targets" INTEGER DEFAULT 0, "Description" TEXT DEFAULT '', "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EntityID", "ActionID"), FOREIGN KEY ("EntityID") REFERENCES "Entity" ("EntityID") ON DELETE CASCADE, FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "ActionDamage" ( "EntityID" INTEGER NOT NULL, "ActionID" INTEGER NOT NULL, "DamageID" INTEGER NOT NULL, "Amount" TEXT DEFAULT '', "Type" TEXT DEFAULT '', "AltDmgActive" TEXT DEFAULT '' CHECK ("AltDmgActive" IN ('X', '')) COLLATE NOCASE, "Amount2" TEXT DEFAULT '', "Type2" TEXT DEFAULT '', "AltDmgNote" TEXT DEFAULT '', "SaveDmgActive" TEXT DEFAULT '' CHECK ("SaveDmgActive" IN ('X', '')) COLLATE NOCASE, "Ability" TEXT DEFAULT '', "DC" INTEGER DEFAULT 0, "HalfDamage" TEXT DEFAULT '' CHECK ("HalfDamage" IN ('X', '')) COLLATE NOCASE, "SaveDmgNote" TEXT DEFAULT '', "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EntityID", "ActionID", "DamageID"), FOREIGN KEY ("EntityID") REFERENCES "Entity" ("EntityID") ON DELETE CASCADE, FOREIGN KEY ("EntityID", "ActionID") REFERENCES "Action" ("EntityID", "ActionID") ON DELETE CASCADE, FOREIGN KEY ("Type") REFERENCES "DamageType" ("DamageType"), FOREIGN KEY ("Type2") REFERENCES "DamageType" ("DamageType"), FOREIGN KEY ("Ability") REFERENCES "Ability" ("Ability"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "Encounter" ( "EncounterID" INTEGER NOT NULL UNIQUE CHECK ("EncounterID" > 0), "Name" TEXT DEFAULT '', "Description" TEXT DEFAULT '', "CreationDate" TEXT NOT NULL CHECK (length ("CreationDate") = 8), "AccessedDate" TEXT NOT NULL CHECK (length ("AccessedDate") = 8), "Campaign" TEXT DEFAULT '', "Started" TEXT DEFAULT '' CHECK ("Started" IN ('X', '')) COLLATE NOCASE, "Round" INTEGER DEFAULT 0, "Turn" INTEGER DEFAULT 0, "HasLair" TEXT DEFAULT '' CHECK ("HasLair" IN ('X', '')) COLLATE NOCASE, "LairEntityName" TEXT DEFAULT '', "ActiveID" TEXT DEFAULT '', "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EncounterID" AUTOINCREMENT), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "EncounterEntities" ( "EncounterID" INTEGER NOT NULL, "RowID" INTEGER NOT NULL, "EntityID" INTEGER NOT NULL, "Suffix" TEXT DEFAULT '', "Initiative" INTEGER DEFAULT 0, "MaxHitPoints" INTEGER NOT NULL, "TempHitPoints" INTEGER DEFAULT 0, "CurrentHitPoints" INTEGER NOT NULL, "ArmorClassBonus" INTEGER DEFAULT 0, "Notes" TEXT DEFAULT '', "IsHostile" TEXT DEFAULT 'X' CHECK ("IsHostile" IN ('X', '')) COLLATE NOCASE, "EncounterLocked" TEXT DEFAULT '' CHECK ("EncounterLocked" IN ('X', '')) COLLATE NOCASE, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EncounterID", "RowID"), FOREIGN KEY ("EncounterID") REFERENCES "Encounter" ("EncounterID") ON DELETE CASCADE, FOREIGN KEY ("EntityID") REFERENCES "Entity" ("EntityID"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "EncEntConditions" ( "EncounterID" INTEGER NOT NULL, "RowID" INTEGER NOT NULL, "Condition" TEXT NOT NULL, "Duration" INTEGER NOT NULL DEFAULT 0, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EncounterID", "RowID", "Condition"), FOREIGN KEY ("EncounterID", "RowID") REFERENCES "EncounterEntities" ("EncounterID", "RowID") ON DELETE CASCADE, FOREIGN KEY ("Condition") REFERENCES "Condition" ("Condition"), FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "Lair" ( "EntityID" INTEGER NOT NULL, "Name" TEXT, "Description" TEXT, "Initiative" INTEGER CHECK (Initiative >= 0), "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EntityID"), FOREIGN KEY ("EntityID") REFERENCES "Entity" ("EntityID") ON DELETE CASCADE, FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "Modifiers" ( "EntityID" INTEGER NOT NULL, "Item" INTEGER NOT NULL CHECK ("Item" >= 0), "Type" TEXT NOT NULL, "Name" TEXT NOT NULL, "Value" INTEGER DEFAULT 0, "Description" TEXT DEFAULT '', "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EntityID", "Item"), FOREIGN KEY ("EntityID") REFERENCES "Entity" ("EntityID") ON DELETE CASCADE, FOREIGN KEY ("Type") REFERENCES "ModifierType" ("ModifierType") ON DELETE CASCADE, FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "SimpleAction" ( "EntityID" INTEGER NOT NULL, "ActionID" INTEGER NOT NULL, "Type" TEXT NOT NULL CHECK ("Type" IN ('Bonus', 'Reaction')), "Name" TEXT NOT NULL, "Description" TEXT NOT NULL, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EntityID", "ActionID"), FOREIGN KEY ("EntityID") REFERENCES "Entity" ("EntityID") ON DELETE CASCADE, FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "SpokenLanguage" ( "EntityID" INTEGER NOT NULL, "Language" TEXT NOT NULL, "Description" TEXT DEFAULT '', "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("Language", "EntityID"), FOREIGN KEY ("EntityID") REFERENCES "Entity" ("EntityID") ON DELETE CASCADE, FOREIGN KEY ("Language") REFERENCES "Language" ("Language") ON DELETE CASCADE, FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE TABLE "SuperAction" ( "EntityID" INTEGER NOT NULL, "ActionID" INTEGER NOT NULL, "Type" TEXT NOT NULL CHECK ("Type" IN ('Legendary', 'Mythic', 'Lair')), "Name" TEXT NOT NULL DEFAULT 'X', "Description" TEXT NOT NULL, "Points" INTEGER NOT NULL, "IsRegional" TEXT CHECK ("IsRegional" in ('X', '')) COLLATE NOCASE, "Domain" TEXT NOT NULL DEFAULT 'Private', "Published" TEXT NOT NULL DEFAULT '' CHECK ("Published" in ('', 'X')), PRIMARY KEY ("EntityID", "ActionID", "Type"), FOREIGN KEY ("EntityID") REFERENCES "Entity" ("EntityID") ON DELETE CASCADE, FOREIGN KEY ("Domain") REFERENCES "User" ("UserName") ON DELETE CASCADE ON UPDATE CASCADE );
CREATE VIEW LairActionV AS SELECT EntityID, Name, Description, coalesce(IsRegional, '') as IsRegional, Domain, Published FROM SuperAction WHERE Type = 'Lair';
CREATE VIEW SuperActionHV AS SELECT EntityID, Type, Description, Points, Domain, Published FROM SuperAction WHERE Type in ('Legendary', 'Mythic') AND Name = 'X';
CREATE VIEW SuperActionV AS SELECT EntityID, Type, Name, Description, Points, Domain, Published FROM SuperAction WHERE Type in ('Legendary', 'Mythic') and Name <> 'X';

COMMIT;

PRAGMA INTEGRITY_CHECK;
